1.JDBC：访问数据库解决方案
	驱动管理：DriverManager
	连接接口：Connection
		  DatabaseMetaData
	语句对象接口：Statement
		       PreparedStatement//执行内容不变的sql
		       CallableStatement
	结果集接口：ResultSet
		    ResultSetMetaData

2.加载驱动  Class.forName("数据库驱动名");
   建立连接  Connection conn =DriverManager.getConnection("jdbc:链接地址","用户","密码")
   SQL语句   Statement stmt =conn.createStatement();
		DDL语句：boolean flag=stmt.execute(sql);
		DQL语句：ResultSet rs=stmt.executeQuery(sql);
		DML语句：int flag =stmt.executeUpdate(sql);
  返回结果集ResultSet： rs.next();//有值返回ture 没有值返回 false;
		     rs.getXXX();//得到XXX字段;
  关闭连接：conn.close();
  
3.连接池( Connection Pool )DataSource
  通过DataSource获取连接 过程：
	Private static     BasicDataSource dataSource =new BasicDataSource();//建立DataSource
		        dataSource.setDriverClassName(driveClassName);//用连接池加载驱动
		        dataSource.setUrl(url);//用连接池 设置 连接地址
		        dataSource.setUsername(username);//用连接池 设置 用户
 		        dataSource.setPassword(password);//用连接池 设置 密码

		        Connection conn = dataSource.getConnection();//建立连接；

4.MySQL分页查询：select * from t   limit   X,  M;  //X是从第几条开始显示。 M是每页多少条；
   Oracle分页查询： X  between ? and ?;//X是字段；
5.DAO  数据访问对象
	一般工作：获取连接  Connection conn=getConnection();
		写sql         Statement st=conn.Statement(sql);
                              XXXXX

6.提交
   获得提交方式：Connection.getAutoCommit();
   设置提交方式：Connection.setAutoCommit();
   提交事务：Connection.commit();
   回滚事务：Connection.rollback();

7.批量更新
   addBatch(sql);//批量添加执行的sql;
   executeBatch();//及时之前批量添加的sql;
   clearBatch();//清除添加的sql;

8.SQL 2008连接数据库例：
	import java.sql.*;

	public class Test {
	public static void main(String[] srg) {
	String driverName = "com.microsoft.sqlserver.jdbc.SQLServerDriver"; //加载JDBC驱动
	String dbURL = "jdbc:sqlserver://localhost:1433; DatabaseName=sample"; //连接服务器和数据库sample
	String userName = "sa"; //默认用户名
	String userPwd = "123456"; //密码
	Connection dbConn;

	try {
	Class.forName(driverName);
	dbConn = DriverManager.getConnection(dbURL, userName, userPwd);
	System.out.println("Connection Successful!"); //如果连接成功 控制台输出Connection Successful!
	} catch (Exception e) {
	e.printStackTrace();
	}
	}
	}
